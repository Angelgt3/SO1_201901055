este es mi modulo ram "#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/sysinfo.h>
#include <linux/mm.h>

static int __init ram_init(void) {
    struct sysinfo info;
    si_meminfo(&info);
    printk(KERN_INFO "Total RAM: %lu\n", info.totalram);
    printk(KERN_INFO "Free RAM: %lu\n", info.freeram);
    return 0;
}

static void __exit ram_exit(void) {
    printk(KERN_INFO "Exiting ram_so1_1s2024 module\n");
}

module_init(ram_init);
module_exit(ram_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Angel");
MODULE_DESCRIPTION("A simple RAM info kernel module");
" y este es mi modulo "#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/sched.h>
#include <linux/sched/signal.h>

static int __init cpu_module_init(void) {
    struct task_struct *task;
    int count = 0;
    // Iterar sobre todos los procesos para contarlos
    for_each_process(task) {
        count++;
    }
    // Imprimir el total de procesos en el kernel log
    printk(KERN_INFO "Total number of processes: %d\n", count);
    return 0; // Retornar 0 indica que la inicialización fue exitosa
}

static void __exit cpu_exit(void) {
    printk(KERN_INFO "Exiting cpu_so1_1s2024 module\n");
}

module_init(cpu_module_init);
module_exit(cpu_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Angel");
MODULE_DESCRIPTION("Módulo del kernel para obtener información de la CPU y los procesos");
" y este el make "obj-m += ram_so1_1s2024.o
obj-m += cpu_so1_1s2024.o

all:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean"


Comandos
sudo insmod ram_so1_1s2024.ko
sudo insmod cpu_so1_1s2024.ko

sudo insmod /home/angel/Documentos/GitHub/SO1_201901055/Proyecto1/Modulos/ram_so1_1s2024.ko
sudo insmod /home/angel/Documentos/GitHub/SO1_201901055/Proyecto1/Modulos/cpu_so1_1s2024.ko

lsmod

sudo dmesg | grep -E 'cpu_so1_1s2024'


docker ps 
docker ps -a 
docker build -t back_go .

docker run --name backend_container backend

docker stop [ID]
docker rm [ID]
